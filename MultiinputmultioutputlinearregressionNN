import torch  
  
x_data = torch.Tensor([[0,1,4,5,6], [3,4,6,7,8], [9,9,8,7,1]]) 
y_data = torch.Tensor([[1,1], [0,2], [2,1]]) 
  
torch.manual_seed(1)

class LinearRegressionModel(torch.nn.Module): 
  
    def __init__(self): 
        super(LinearRegressionModel, self).__init__() 
        self.linear1 = torch.nn.Linear(5, 2)
        
  
    def forward(self, x): 
        y_pred = torch.nn.functional.relu(self.linear1(x)) 
        return y_pred 
  
model = LinearRegressionModel() 
  
criterion = torch.nn.MSELoss() 
optimizer = torch.optim.Adam(model.parameters(), lr = 0.002) 
  
for epoch in range(1950): 
  
    optimizer.zero_grad() 
    pred_y = model(x_data) 
    loss = criterion(pred_y, y_data) 
    loss.backward() 
    optimizer.step() 
    print('epoch {}, loss {}'.format(epoch, loss.data.item())) 
  
new_var = torch.Tensor([0,1,4,5,6])
pred_y = model(new_var) 
print("predict (after training)", 4, model(new_var).data) 
