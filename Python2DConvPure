import os 
import torch
import torchvision
from torchvision.datasets.utils import download_url
from torch.utils.data import random_split
import tarfile
import cv2


# dataset_url = "https://s3.amazonaws.com/fast-ai-imageclas/cifar10.tgz"
# download_url(dataset_url, '.')

# with tarfile.open('./cifar10.tgz', 'r:gz') as tar:
#     tar.extractall(path='./data')

data_dir = './data/cifar10'
print(os.listdir(data_dir))
classes = os.listdir(data_dir+'/train')
print(classes)
print("No of truck class labels", len(os.listdir(data_dir + '/train' +'/truck')))

print("The number of train classes are:",len(os.listdir(data_dir+"/train")))
for i in range(len(classes)):
    print(classes[i],len(os.listdir(data_dir+'/train'+'/'+classes[i])) , 'train')

print("The number of test classes are:",len(os.listdir(data_dir+"/test")))
for i in range(len(classes)):
    print(classes[i],len(os.listdir(data_dir+'/test'+'/'+classes[i])) , 'test')

from torchvision.datasets import ImageFolder 
from torchvision.transforms import ToTensor

dataset = ImageFolder(data_dir+'/train', transform = ToTensor())
print(len(dataset))
print(dataset.classes)
img, label = dataset[0]

print(img.shape, label)

import matplotlib 
import matplotlib.pyplot as plt
 

def showImage(image, label):
    plt.imshow(image.permute(1,2,0))
    plt.show()

# showImage(*dataset[20])

random_seed = 42 
torch.manual_seed(random_seed)
val_size = 5000
train_size = len(dataset) - val_size

train_ds, val_ds = random_split(dataset, [train_size,val_size])
print(train_size,val_size)

from torch.utils.data.dataloader import DataLoader

# from torch.utils.data import DataLoader

batch_size = 128

train_dl = DataLoader(train_ds,batch_size,shuffle=True,num_workers=4, pin_memory=True)
val_dl = DataLoader(val_ds,batch_size*2,num_workers=4, pin_memory=True)

from torchvision.utils import make_grid

def show_batch(dl):
    for images, labels in dl:
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.set_xticks([]); ax.set_yticks([])
        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))
        plt.show()
        break

# show_batch(train_dl)

#conv2d
image = torch.tensor([
    [3,3,2,1,0],
    [0,0,1,3,1],
    [3,1,2,2,3],
    [2,0,0,2,2],
    [2,0,0,0,1]
])

kernel = torch.tensor([
    [0,1,2],
    [2,2,0],
    [0,1,2]
])

hi,wi = image.shape
hk,wk = kernel.shape
print(image)
print(wi,hi)
print(wk,hk)

# print(image[:3,:3])
# print(torch.sum(image[:3,:3]))
ro, co = hi-hk+1, wi-wk+1
output = torch.zeros([ro, co])




for i in range(hi):
    if (i+2 < hi):
        for j in range(wi):
            if (j+2 < wi):
                print(image[i:i+wk,j:j+hk])
                currentElementSum = torch.sum(image[i:i+3,j:j+3]*kernel)
                print("mul",image[i:i+wk,j:j+hk]*kernel)
                print(currentElementSum)
                print(j)
                output[i:i+3,j:j+3] = currentElementSum
          
print(output)

